name: Deploy and Tag Release

on:
  push:
    branches:
      - main
    tags:
      - "*"

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "deloy"
  cancel-in-progress: false

jobs:
  build_and_deploy_staging:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # - name: Reset Git working directory
      #   run: git reset --hard

      # - name: Detect package manager
      #   id: detect-package-manager
      #   run: |
      #     if [ -f "${{ github.workspace }}/yarn.lock" ]; then
      #       echo "manager=yarn" >> $GITHUB_OUTPUT
      #       echo "command=install" >> $GITHUB_OUTPUT
      #       echo "runner=yarn" >> $GITHUB_OUTPUT
      #       exit 0
      #     elif [ -f "${{ github.workspace }}/package.json" ]; then
      #       echo "manager=npm" >> $GITHUB_OUTPUT
      #       echo "command=ci" >> $GITHUB_OUTPUT
      #       echo "runner=npx --no-install" >> $GITHUB_OUTPUT
      #       exit 0
      #     else
      #       echo "Unable to determine package manager"
      #       exit 1
      #     fi

      # - name: Setup Node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "20"

      # - name: Restore cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       .next/cache
      #     # Generate a new cache whenever packages or source files change.
      #     key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
      #     # If source files changed but packages didn't, rebuild from a prior cache.
      #     restore-keys: |
      #       ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      # - name: Install dependencies
      #   run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      # - name: Run tests
      #   run: npm test

      # - name: Create .env file
      #   run: |
      #     echo "NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}" > .env
      #     echo "NEXT_PUBLIC_SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}" >> .env

      # - name: Build with Next.js
      #   run: ${{ steps.detect-package-manager.outputs.runner }} next build

      # - name: Deploy to Vercel (Staging)
      #   uses: amondnet/vercel-action@v25 #deploy
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
      #     github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
      #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID}} #Required
      #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}} #Required
      #     github-comment: false
      #     alias-domains: |
      #       git-common-flow-staging.vercel.app

      - name: Include steps from base.yml
        uses: ../.github/actions/nextjs
        with:
          included: true

  # e2e-tests-staging:
  #   needs: build_and_deploy_staging
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Install Playwright Browsers
  #       run: npx playwright install --with-deps
  #     - name: Run Playwright tests
  #       run: URL=https://chnirt.github.io/git-common-flow/ npx playwright test
  #     - uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  update_version_build_and_deploy_production:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Reset Git working directory
        run: git reset --hard

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Update Version in package.json
        id: update_version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          new_version=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          npm version $new_version --no-git-tag-version
          echo "Updated version to $new_version in package.json"
          echo "new_version=${new_version}" >> $GITHUB_ENV

      - name: Commit Version Change
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Update version to ${new_version}"
          git push origin HEAD:main

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Run tests
        run: npm test

      - name: Create .env file
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}" > .env
          echo "NEXT_PUBLIC_SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}" >> .env

      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25 #deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }} # Required
          github-token: ${{ secrets.GITHUB_TOKEN }} #Optional
          vercel-args: "--prod" #Optional
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}} #Required
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}} #Required
          github-comment: false
